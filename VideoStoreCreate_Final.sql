-- MySQL Script generated by MySQL Workbench
-- 09/24/15 07:32:54
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema VideoStore
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema VideoStore
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `VideoStore` DEFAULT CHARACTER SET utf8 ;
USE `VideoStore` ;

-- -----------------------------------------------------
-- Table `VideoStore`.`customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `VideoStore`.`customer` (
  `customer_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(20) NOT NULL,
  `last_name` VARCHAR(20) NOT NULL,
  `street` VARCHAR(30) NULL,
  `city` VARCHAR(30) NULL,
  `state` VARCHAR(2) NULL,
  `zip` VARCHAR(10) NULL,
  `phone` VARCHAR(20) NULL,
  `email` VARCHAR(20) NULL,
  PRIMARY KEY (`customer_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `VideoStore`.`video`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `VideoStore`.`video` (
  `video_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `video_title` VARCHAR(50) NOT NULL,
  `video_genre` VARCHAR(50) NULL,
  `video_star` VARCHAR(80) NULL,
  `video_director` VARCHAR(50) NULL,
  `video_rating` VARCHAR(5) NULL,
  `release_date` DATE NULL,
  `length` SMALLINT(5) UNSIGNED NULL,
  PRIMARY KEY (`video_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `VideoStore`.`rental`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `VideoStore`.`rental` (
  `rental_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `video_id` INT UNSIGNED NOT NULL,
  `customer_id` INT UNSIGNED NOT NULL,
  `rental_rate` DECIMAL(4,2) NOT NULL DEFAULT 2.99,
  `rental_duration_days` TINYINT(2) UNSIGNED NOT NULL DEFAULT 4,
  `rental_date` DATE NOT NULL,
  `return_date` DATE NULL,
  PRIMARY KEY (`rental_id`),
  INDEX `video_id_idx` (`video_id` ASC),
  INDEX `customer_id_idx` (`customer_id` ASC),
  CONSTRAINT `video_id`
    FOREIGN KEY (`video_id`)
    REFERENCES `VideoStore`.`video` (`video_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `customer_id`
    FOREIGN KEY (`customer_id`)
    REFERENCES `VideoStore`.`customer` (`customer_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `VideoStore` ;

-- -----------------------------------------------------
-- Placeholder table for view `VideoStore`.`past_due_customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `VideoStore`.`past_due_customers` (`video_id` INT, `video_title` INT, `customer_id` INT, `first_name` INT, `last_name` INT, `phone` INT, `email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `VideoStore`.`video_status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `VideoStore`.`video_status` (`video_id` INT, `video_title` INT, `video_genre` INT, `video_star` INT, `video_director` INT, `video_rating` INT, `release_date` INT, `length` INT, `rental_date` INT, `return_date` INT, `available` INT);

-- -----------------------------------------------------
-- function video_in_stock
-- -----------------------------------------------------

DELIMITER $$
USE `VideoStore`$$
CREATE FUNCTION video_in_stock(p_video_id INT) 
RETURNS INT
READS SQL DATA
BEGIN
 DECLARE v_rentals INT;
 DECLARE v_out     INT;

    #AN ITEM IS IN-STOCK IF THERE ARE EITHER NO ROWS IN THE rental TABLE
    #FOR THE ITEM OR ALL ROWS HAVE return_date POPULATED

    SELECT COUNT(*) INTO v_rentals
    FROM rental
    WHERE video_id = p_video_id;

    IF v_rentals = 0 THEN
      RETURN TRUE;
    END IF;

    SELECT COUNT(rental_id) INTO v_out
    FROM video LEFT JOIN rental USING(video_id)
    WHERE video.video_id = p_video_id
    AND rental.return_date IS NULL;

    IF v_out > 0 THEN
      RETURN FALSE;
    ELSE
      RETURN TRUE;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `VideoStore`.`past_due_customers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `VideoStore`.`past_due_customers`;
USE `VideoStore`;
CREATE  OR REPLACE VIEW past_due_customers AS
SELECT video.video_id, video.video_title, customer.customer_id, customer.first_name, customer.last_name, customer.phone, customer.email
FROM video INNER JOIN customer INNER JOIN rental
ON customer.customer_id = rental.customer_id
AND video.video_id = rental.video_id
WHERE TO_DAYS(rental.return_date)-TO_DAYS(rental.rental_date)>rental.rental_duration_days
OR rental.return_date IS NULL AND TO_DAYS(curdate())-TO_DAYS(rental.rental_date)>rental.rental_duration_days
ORDER BY customer_id;
 

;

-- -----------------------------------------------------
-- View `VideoStore`.`video_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `VideoStore`.`video_status`;
USE `VideoStore`;
CREATE  OR REPLACE VIEW video_status AS
SELECT video.*, rental.rental_date, rental.return_date, rental.rental_date IS NULL OR rental.return_date IS NOT NULL AS available
FROM video LEFT JOIN rental
ON video.video_id = rental.video_id
ORDER BY video_id;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
